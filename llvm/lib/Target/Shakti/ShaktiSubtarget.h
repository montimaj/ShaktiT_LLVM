//===--------- ShaktiSubtarget.h - Define Subtarget for the Shakti -----------*-//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Shakti specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_SHAKTI_SHAKTISUBTARGET_H
#define LLVM_LIB_TARGET_SHAKTI_SHAKTISUBTARGET_H

#include "ShaktiFrameLowering.h"
#include "ShaktiISelLowering.h"
#include "ShaktiInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "ShaktiGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class ShaktiSubtarget : public ShaktiGenSubtargetInfo {
  virtual void anchor();
  ShaktiInstrInfo InstrInfo;
  ShaktiTargetLowering TargetLowering;
  SelectionDAGTargetInfo TSInfo;
  ShaktiFrameLowering FrameLowering;
  InstrItineraryData InstrItins;

public:
  ShaktiSubtarget(const Triple &TT, const std::string &CPU,
                 const std::string &FS, const ShaktiTargetMachine &TM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);
  const ShaktiInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const ShaktiRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const ShaktiTargetLowering *getTargetLowering() const override {
    return &TargetLowering;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  bool enableMachineScheduler() const override { return true; }
  bool enablePostRAScheduler() const override { return true; }
  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
};

} // end namespace llvm

#endif
